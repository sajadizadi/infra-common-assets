apiVersion: eksctl.io/v1alpha5
iam:
  vpcResourceControllerPolicy: true
  withOIDC: false
kind: ClusterConfig
metadata:
  name: {} #example: dev
  region: {} #example: ca-central-1
  version: {} #example: "1.24"
managedNodeGroups:
- amiFamily: AmazonLinux2
  #containerRuntime: containerd
  desiredCapacity: {} #example: 1
  maxSize: {} #example: 2
  minSize: {} #example: 1
  disableIMDSv1: false
  disablePodIMDS: false
  iam:
    withAddonPolicies:
      albIngress: false
      appMesh: null
      appMeshPreview: null
      autoScaler: false
      awsLoadBalancerController: false
      certManager: false
      cloudWatch: false
      ebs: false
      efs: false
      externalDNS: false
      fsx: false
      imageBuilder: false
      xRay: false
  instanceSelector: {}
  instanceType: m5.large
  labels:
    alpha.eksctl.io/cluster-name: {} #example: dev
    alpha.eksctl.io/nodegroup-name: m5-large-nodegroup
    role: backend
  name: m5-large-nodegroup
  privateNetworking: true #turned this to true because of error: No export named eksctl-dev-cluster::SubnetsPublic found. Rollback requested by user. in node group's cfn
  #securityGroups:
    #withLocal: null
    #withShared: null
  ssh:
    allow: false
  volumeIOPS: 3000
  volumeSize: 80
  volumeThroughput: 125
  volumeType: gp3
privateCluster:
  enabled: false
  skipEndpointCreation: false
vpc:
  clusterEndpoints:
    privateAccess: true
    publicAccess: true
  manageSharedNodeSecurityGroupRules: true
  nat:
    gateway: Single
  subnets: {}
    #example:
    #private:
      #subnet-1:
        #az: subnet-1
        #id: subnet-0742aba8cf8f957ee
      #subnet-2:
        #az: subnet-2
        #id: subnet-053d2af7ed2aead3d
      #subnet-3:
        #az: subnet-3
        #id: subnet-047d4bf9ad442fc1b