name: Source Build Image

on:
  workflow_call:

jobs:
  Make-Image:
    #add this to avoid loops
    #(skip if the committer is this job (this job pushes after kube artefact is updated))  
    #https://stackoverflow.com/questions/73476268/how-to-restrict-your-workflow-to-be-only-run-by-members-of-your-organisation-gi
    #if: contains('["kingthorin","lpoulter"]', github.actor)

    #does this work? ignore if the commit was on infra folder (to avoid loop)
    #paths-ignore:
    #  - 'infra/**'
    env:
      PYTHON_VERSION: "3.10"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Check out this repository code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials to Make Image
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ca-central-1
          role-to-assume: arn:aws:iam::782042535526:role/github-role
          role-session-name: MySessionName
      
      - name: Login to Amazon ECR to Make Image
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Prepare Vars
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      #temporarily turn this off
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ github.event.repository.name }}
          IMAGE_TAG: ${{ steps.vars.outputs.sha_short }}
          DOCKER_BUILDKIT: 1
        run: |
          aws ecr create-repository --repository-name $REPOSITORY || true
          ##### I should add a policy to allow organization to download this repo (the eks cluters that use this image are in a different account)
          cd src
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Get kubernetes scripts
        run: |
          mkdir -p infra/app/_tmp/kubernetes/
          aws s3 sync s3://infra-common-assets-sajilab/artefacts/kubernetes infra/app/_tmp/kubernetes/


      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd infra/app/_tmp/kubernetes/
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Update deployment
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ github.event.repository.name }}
          IMAGE_TAG: ${{ steps.vars.outputs.sha_short }}
          BRANCH: ${{ github.ref_name }}
        run: |
          git config --global user.email "workflow@sajilab.com"
          git config --global user.name "Workflow"
          cd infra/app
          echo "echoing registry"
          echo $REGISTRY
          #export PYTHONPATH=/tmp/kubernetes/
          echo "echoing ls"
          ls
          python -c "from _tmp.kubernetes.script import fixKubernetesYamls; fixKubernetesYamls('$REGISTRY/$REPOSITORY:$IMAGE_TAG', '$REPOSITORY', '$BRANCH')" > deployment.tmp.yaml

          echo "ls after tmp"
          ls

          mv deployment.tmp.yaml deployment.yaml
          echo "echoing ls again"
          ls 
          cat deployment.yaml
          # echo hello > hello.txt
          # ls
          git add ./deployment.yaml
          git commit -m "workflow committing this"
          git push